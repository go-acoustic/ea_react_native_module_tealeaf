# Copyright (C) 2025 Acoustic, L.P. All rights reserved.
#
# NOTICE: This file contains material that is confidential and proprietary to
# Acoustic, L.P. and/or other developers. No license is granted under any intellectual or
# industrial property rights of Acoustic, L.P. except as may be provided in an agreement with
# Acoustic, L.P. Any unauthorized copying or distribution of content from this file is
# prohibited.

# Secure NPM Publish Workflow using npm Trusted Publishers
#
# Purpose: Automatically publishes React Native Tealeaf packages to npm when Jenkins pushes a version tag
#
# Workflow Flow:
#   1. Jenkins builds and tags a release (e.g., 15.0.27)
#   2. Jenkins pushes the tag to GitHub, triggering this workflow
#   3. Jenkins uploads the tarball to the GitHub Release
#   4. This workflow downloads the tarball from the GitHub Release
#   5. Workflow publishes to npm using OIDC Trusted Publishers (no tokens needed)
#   6. Jenkins polls this workflow for completion status
#
# Prerequisites:
#   - npm package must be configured with GitHub as a Trusted Publisher
#   - Repository must match: aipoweredmarketer/ea_react_native_module_tealeaf
#   - GitHub releases must contain the tarball as an asset
#   - npm CLI version 11.5.1 or later (upgraded automatically in this workflow)
#
# Security: Uses OpenID Connect (OIDC) for authentication - no npm tokens stored in GitHub
#
# Troubleshooting:
#   - "Tarball not found": Check that Jenkins successfully uploaded to GitHub Release
#   - "Timeout after 15 minutes": Check Jenkins upload timing and increase timeout if needed
#   - "npm publish failed": Verify Trusted Publishers configuration on npmjs.com
#   - "Wrong npm tag": Verify package name in package.json (beta vs. release)
#
name: Secure NPM Publish (Trusted Publishers)

on:
  push:
    tags:
      - '*'  # Trigger on any tag pushed by Jenkins
  workflow_dispatch:  # Allow manual testing from GitHub UI

permissions:
  id-token: write  # Required for npm OIDC/Trusted Publishers
  contents: read   # Required for actions/checkout

jobs:
  publish:
    runs-on: ubuntu-latest
    # Only publish from the main repository, not forks
    if: github.repository == 'aipoweredmarketer/ea_react_native_module_tealeaf'
    # Timeout for the entire job (15 minutes total)
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}  # Check out the tagged commit

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Upgrade npm for Trusted Publishers
        timeout-minutes: 3  # Prevent hanging on network issues
        run: |
          echo "Note: Trusted publishing requires npm CLI version 11.5.1 or later."
          echo "Current npm version: $(npm --version)"
          npm install -g npm@latest
          echo "Upgraded npm version: $(npm --version)"

      - name: Verify package metadata
        run: |
          echo "::group::Repository Info"
          echo "Repository: ${{ github.repository }}"
          echo "Tag: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "::endgroup::"

          echo "::group::Package Info"
          cat package.json | grep -E '"(name|version)"'
          echo "::endgroup::"

      - name: Detect package type and download tarball from release
        id: package
        timeout-minutes: 5  # Max wait time: 12 retries × 10s delay (2 min) + 3 min buffer for API calls
        env:
          # Using github.token (automatic GitHub Actions token) for GitHub API access
          # This token has read access to releases and assets in the current repository
          GH_TOKEN: ${{ github.token }}
        run: |
          set -e

          # Get version from package.json
          VERSION=$(cat package.json | grep '"version"' | cut -d'"' -f4)
          echo "Package version: $VERSION"

          # Package type detection and npm tag strategy:
          # Both beta and release packages publish to 'latest' tag because they are
          # SEPARATE npm packages, not pre-release versions of the same package:
          #
          # - Beta package: react-native-acoustic-ea-tealeaf
          #   - Repository: aipoweredmarketer/ea_react_native_module_tealeaf (private)
          #   - Installation: npm install react-native-acoustic-ea-tealeaf
          #   - Purpose: Early access, testing, and preview features
          #
          # - Release package: react-native-acoustic-ea-tealeaf
          #   - Repository: go-acoustic/ea_react_native_module_tealeaf (public)
          #   - Installation: npm install react-native-acoustic-ea-tealeaf
          #   - Purpose: Stable, production-ready releases
          #
          # Note: The 'next' tag is typically used for pre-release versions of the SAME package.
          # Since these are different packages, both use 'latest' for their respective latest versions.
          PACKAGE_NAME=$(cat package.json | grep '"name"' | cut -d'"' -f4)

          if [[ "$PACKAGE_NAME" == *"-beta"* ]]; then
            IS_BETA="true"
            NPM_TAG="latest"
            PACKAGE_TYPE="beta"
            TARBALL="react-native-acoustic-ea-tealeaf-${VERSION}.tgz"
          else
            IS_BETA="false"
            NPM_TAG="latest"
            PACKAGE_TYPE="release"
            TARBALL="react-native-acoustic-ea-tealeaf-${VERSION}.tgz"
          fi

          echo "::notice::Detected $PACKAGE_TYPE package: $TARBALL"

          # Download tarball from GitHub release with retry logic (using authentication)
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/download/${VERSION}/${TARBALL}"
          API_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/${VERSION}"
          echo "::notice::Downloading tarball from: $RELEASE_URL"
          echo "::notice::Will check release via API: $API_URL"

          # Retry configuration for tarball download
          # MAX_RETRIES=12 and RETRY_DELAY=10 means up to 2 minutes of waiting
          # This accounts for the delay between Jenkins uploading the tarball and it becoming available
          MAX_RETRIES=12
          RETRY_DELAY=10
          attempt=1

          while [ $attempt -le $MAX_RETRIES ]; do
            echo "::group::Download attempt ${attempt}/${MAX_RETRIES}"

            # First, check if the release exists via API
            echo "Checking if release ${VERSION} exists..."
            RELEASE_INFO=$(curl -s \
              -H "Authorization: token ${{ github.token }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "$API_URL")

            echo "Release API response (first 20 lines):"
            echo "$RELEASE_INFO" | head -20

            # Check if release has assets
            ASSET_COUNT=$(echo "$RELEASE_INFO" | grep -o '"assets":' | wc -l)
            echo "Asset count in release: $ASSET_COUNT"

            if [ "$ASSET_COUNT" -eq 0 ]; then
              echo "⚠️  Release exists but has no assets yet, waiting..."
              echo "::endgroup::"

              if [ $attempt -eq $MAX_RETRIES ]; then
                echo "::error::Release exists but tarball was never uploaded after ${MAX_RETRIES} attempts"
                echo "::error::Last API response:"
                echo "$RELEASE_INFO"
                exit 1
              fi

              sleep $RETRY_DELAY
              attempt=$((attempt + 1))
              continue
            fi

            # Get the asset API URL for our tarball
            # Private repositories REQUIRE downloading via GitHub API with authentication.
            echo "Finding asset URL for tarball: $TARBALL"
            # Use jq to parse JSON - it's pre-installed on ubuntu-latest runners
            ASSET_API_URL=$(echo "$RELEASE_INFO" | jq -r ".assets[] | select(.name==\"$TARBALL\") | .url")

            if [ -z "$ASSET_API_URL" ]; then
              echo "⚠️  Tarball asset not found in release, available assets:"
              echo "$RELEASE_INFO" | grep '"name":' | grep -A 1 'assets'
              echo "::endgroup::"

              if [ $attempt -eq $MAX_RETRIES ]; then
                echo "::error::Tarball $TARBALL not found in release after ${MAX_RETRIES} attempts"
                exit 1
              fi

              sleep $RETRY_DELAY
              attempt=$((attempt + 1))
              continue
            fi

            echo "Found asset API URL: $ASSET_API_URL"

            # Download using the API URL (required for private repos)
            echo "Downloading via GitHub API..."
            HTTP_CODE=$(curl -L -w "%{http_code}" -o "$TARBALL" \
              -H "Authorization: token ${{ github.token }}" \
              -H "Accept: application/octet-stream" \
              "$ASSET_API_URL" 2>&1)

            echo "HTTP response code: $HTTP_CODE"

            if [ -f "$TARBALL" ] && [ -s "$TARBALL" ]; then
              # Get file size (Linux syntax first, then fallback to macOS/BSD)
              FILE_SIZE=$(stat -c%s "$TARBALL" 2>/dev/null || stat -f%z "$TARBALL" 2>/dev/null)
              echo "File downloaded: $TARBALL (${FILE_SIZE} bytes)"

              # File size check: Minimum 1000 bytes ensures we didn't download an error page
              # Real tarballs are typically 50KB+. Error responses from GitHub are < 1KB.
              if [ "$FILE_SIZE" -gt 1000 ]; then
                echo "::notice::✅ Successfully downloaded $TARBALL on attempt ${attempt} (${FILE_SIZE} bytes)"
                echo "::endgroup::"
                break
              else
                echo "⚠️  File too small (${FILE_SIZE} bytes), likely an error page"
                cat "$TARBALL"
                rm -f "$TARBALL"
              fi
            fi

            echo "::endgroup::"

            if [ $attempt -eq $MAX_RETRIES ]; then
              echo "::error::Failed to download tarball after ${MAX_RETRIES} attempts"
              echo "::error::Last attempt used API URL: $ASSET_API_URL"
              echo "::error::Full release info:"
              echo "$RELEASE_INFO"
              exit 1
            fi

            echo "::warning::Download failed, waiting ${RETRY_DELAY} seconds before retry..."
            sleep $RETRY_DELAY
            attempt=$((attempt + 1))
          done

          if [ ! -f "$TARBALL" ]; then
            echo "::error::Tarball file not found after download: $TARBALL"
            exit 1
          fi

          # Set outputs
          {
            echo "tarball=$TARBALL"
            echo "is_beta=$IS_BETA"
            echo "npm_tag=$NPM_TAG"
            echo "package_type=$PACKAGE_TYPE"
            echo "version=$VERSION"
          } >> "$GITHUB_OUTPUT"

      - name: Verify tarball integrity
        run: |
          echo "::group::Tarball Contents"
          tar -tzf "${{ steps.package.outputs.tarball }}" | head -20
          echo "::endgroup::"

          echo "::group::Tarball Size"
          ls -lh "${{ steps.package.outputs.tarball }}"
          echo "::endgroup::"

      - name: Publish to npm
        timeout-minutes: 5  # npm publish typically takes 30-60s; 5 min allows for network delays and retries
        run: |
          echo "::notice::Publishing ${{ steps.package.outputs.package_type }} package with '${{ steps.package.outputs.npm_tag }}' tag"

          echo "::group::npm Configuration"
          npm config list
          echo "::endgroup::"

          echo "::group::npm Whoami Check"
          npm whoami || echo "Not authenticated with npm token (expected for Trusted Publishers)"
          echo "::endgroup::"

          echo "::group::Package Info"
          npm pack --dry-run "${{ steps.package.outputs.tarball }}" || echo "Pack dry-run not available"
          echo "::endgroup::"

          echo "::notice::Running npm publish with verbose logging..."
          npm publish "${{ steps.package.outputs.tarball }}" \
            --access public \
            --tag "${{ steps.package.outputs.npm_tag }}" \
            --verbose \
            --loglevel verbose
        env:
          # npm provenance attestation configuration
          # When enabled with npm CLI ≥ 11.5.1, npm automatically generates provenance
          # statements that cryptographically link packages to source code and build process.
          #
          # Provenance settings by package type:
          # - Beta package (private repo): disabled - not supported for private repositories
          # - Release package (public repo): enabled - provides supply chain security and transparency
          NPM_CONFIG_PROVENANCE: ${{ steps.package.outputs.is_beta == 'false' }}
          NPM_CONFIG_LOGLEVEL: verbose

      - name: Publish summary
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" <<EOF
          ## 📦 NPM Publish Summary

          - **Package Type**: ${{ steps.package.outputs.package_type }}
          - **Tarball**: \`${{ steps.package.outputs.tarball }}\`
          - **NPM Tag**: \`${{ steps.package.outputs.npm_tag }}\`
          - **Tag Version**: \`${{ github.ref_name }}\`
          - **Commit**: \`${{ github.sha }}\`

          ### Installation
          \`\`\`bash
          npm install $(cat package.json | grep '"name"' | cut -d'"' -f4)@${{ steps.package.outputs.npm_tag }}
          \`\`\`

          ✅ Published successfully using [npm Trusted Publishers](https://docs.npmjs.com/trusted-publishers)

          ---
          **Note:** Jenkins will be notified of this result and will send a consolidated Slack notification.
          EOF
